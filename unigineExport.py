bl_info = { "name": "Unigine Import-Export", "blender": (4, 0, 2), "category": "Object", "author": "Vamps(Swapnil)", "version": (2, 1), "description": "Import and Export from Blender to Unigine", } import bpy import os import tempfile import subprocess import shutil import glob from bpy.types import Operator, Panel from bpy.props import StringProperty def export_to_fbx(filepath, global_scale=0.01): export_path = r"C:\Bl_Unigine" os.makedirs(export_path, exist_ok=True) export_filepath = os.path.join(export_path, os.path.basename(filepath)) try: bpy.ops.export_scene.fbx( filepath=export_filepath, check_existing=True, filter_glob="*.fbx", use_selection=True, use_active_collection=False, global_scale=global_scale, apply_unit_scale=True, apply_scale_options='FBX_SCALE_ALL', bake_space_transform=True, object_types={'MESH'}, use_mesh_modifiers=True, use_mesh_modifiers_render=True, mesh_smooth_type='OFF', use_mesh_edges=False, use_tspace=False, use_custom_props=False, add_leaf_bones=False, primary_bone_axis='Y', secondary_bone_axis='X', use_armature_deform_only=False, armature_nodetype='NULL', bake_anim=False, bake_anim_use_all_bones=False, bake_anim_use_nla_strips=False, bake_anim_use_all_actions=False, bake_anim_force_startend_keying=False, bake_anim_step=1, bake_anim_simplify_factor=1, path_mode='AUTO', embed_textures=False, batch_mode='OFF', use_batch_own_dir=True, use_metadata=True, axis_forward='Y', axis_up='Z' ) print("FBX export successful.") except Exception as e: print(f"FBX export failed: {e}") raise e move_latest_mesh_file(export_path) return export_filepath def move_latest_mesh_file(export_path): mesh_files = glob.glob(os.path.join(export_path, '*.mesh')) if mesh_files: latest_mesh_file = max(mesh_files, key=os.path.getmtime) destination_folder = bpy.context.scene.mesh_destination_folder os.makedirs(destination_folder, exist_ok=True) new_mesh_name = bpy.context.scene.new_mesh_name + ".mesh" try: shutil.move(latest_mesh_file, os.path.join(destination_folder, new_mesh_name)) print(f"Moved {latest_mesh_file} to {os.path.join(destination_folder, new_mesh_name)}.") except Exception as e: print(f"Failed to move mesh file: {e}") raise e else: print("No .mesh files found to move.") class Blender_OT_Export(Operator): bl_idname = "blender.export" bl_label = "Export to Blender" bl_description = "Export model to another Blender instance" bl_options = {'REGISTER', 'UNDO'} def execute(self, context): filepath = os.path.join(tempfile.gettempdir(), "Blender_TMP.fbx") try: export_filepath = export_to_fbx(filepath) self.report({'INFO'}, 'Blender - Export Done!') print("Export to FBX done.") except Exception as e: self.report({'ERROR'}, f'Export failed: {e}') print(f"Export to FBX failed: {e}") return {'CANCELLED'} meshimport_exe = r"C:\Bl_Unigine\meshimport_x64.exe" if not os.path.exists(meshimport_exe): self.report({'ERROR'}, f"Executable not found at '{meshimport_exe}'") print(f"Executable not found at '{meshimport_exe}'") return {'CANCELLED'} command = [meshimport_exe, export_filepath] try: subprocess.run(command, check=True) self.report({'INFO'}, f'Shell command executed: {" ".join(command)}') print(f"Shell command executed: {' '.join(command)}") except subprocess.CalledProcessError as e: self.report({'ERROR'}, f'Shell command failed: {e}') print(f'Shell command failed: {e}') return {'CANCELLED'} return {'FINISHED'} class Blender_OT_Import(Operator): bl_idname = "blender.import" bl_label = "Import from Unigine" bl_description = "Import .mesh file by converting it to .obj" bl_options = {'REGISTER', 'UNDO'} filepath: StringProperty(subtype="FILE_PATH") def execute(self, context): mesh_filepath = self.filepath output_filepath = r"C:\Bl_Unigine\Import\import.obj" os.makedirs(os.path.dirname(output_filepath), exist_ok=True) meshimport_exe = r"C:\Bl_Unigine\meshimport_x64.exe" # Replace this with the actual path if not os.path.exists(meshimport_exe): self.report({'ERROR'}, f"Executable not found at '{meshimport_exe}'") return {'CANCELLED'} command = [meshimport_exe, mesh_filepath, "-o", output_filepath] try: subprocess.run(command, check=True) self.report({'INFO'}, f'Converted {mesh_filepath} to {output_filepath}') except subprocess.CalledProcessError as e: self.report({'ERROR'}, f'Conversion command failed: {e}') return {'CANCELLED'} try: bpy.ops.wm.obj_import(filepath=output_filepath) self.report({'INFO'}, 'Imported .obj file into Blender') # Set the X rotation of the imported object to 0 imported_objects = [obj for obj in context.selected_objects if obj.type == 'MESH'] for obj in imported_objects: obj.rotation_euler[0] = 0 except Exception as e: self.report({'ERROR'}, f'Importing .obj file failed: {e}') return {'CANCELLED'} return {'FINISHED'} def invoke(self, context, event): context.window_manager.fileselect_add(self) return {'RUNNING_MODAL'} class VIEW3D_PT_Blender(Panel): bl_space_type = 'VIEW_3D' bl_region_type = 'UI' bl_category = 'Unigine Tool' bl_label = "Unigine Export" def draw(self, context): layout = self.layout scene = context.scene col = layout.column(align=True) col.operator('blender.import', icon='IMPORT', text="Import .mesh file") col.operator('blender.export', icon='EXPORT', text="Export to Unigine") col.prop(scene, "mesh_destination_folder", text="Destination Folder") col.prop(scene, "new_mesh_name", text="New Mesh Name") col.operator("mesh.set_destination_folder", text="Select Destination Folder") class SetDestinationFolderOperator(Operator): bl_idname = "mesh.set_destination_folder" bl_label = "Set Destination Folder" bl_description = "Set the destination folder for the exported .mesh file" filepath: bpy.props.StringProperty(subtype="DIR_PATH") def execute(self, context): context.scene.mesh_destination_folder = self.filepath return {'FINISHED'} def invoke(self, context, event): wm = context.window_manager wm.fileselect_add(self) return {'RUNNING_MODAL'} # Registration classes = ( Blender_OT_Export, VIEW3D_PT_Blender, SetDestinationFolderOperator, Blender_OT_Import, ) def register(): bpy.types.Scene.mesh_destination_folder = StringProperty( name="Mesh Destination Folder", default="C:/DestinationFolder", description="Folder where the latest .mesh file will be moved" ) bpy.types.Scene.new_mesh_name = StringProperty( name="New Mesh Name", default="new_mesh", description="New name for the .mesh file" ) for cls in classes: bpy.utils.register_class(cls) print("Unigine Export add-on registered.") def unregister(): del bpy.types.Scene.mesh_destination_folder del bpy.types.Scene.new_mesh_name for cls in reversed(classes): bpy.utils.unregister_class(cls) print("Unigine Export add-on unregistered.") if __name__ == "__main__": register()